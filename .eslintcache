[{"C:\\Users\\cavjo\\Documents\\eventmanager\\src\\index.js":"1","C:\\Users\\cavjo\\Documents\\eventmanager\\src\\reportWebVitals.js":"2","C:\\Users\\cavjo\\Documents\\eventmanager\\src\\App.js":"3","C:\\Users\\cavjo\\Documents\\eventmanager\\src\\components\\add-event.component.js":"4","C:\\Users\\cavjo\\Documents\\eventmanager\\src\\services\\events.service.js":"5","C:\\Users\\cavjo\\Documents\\eventmanager\\src\\http-common.js":"6","C:\\Users\\cavjo\\Documents\\eventmanager\\src\\components\\register.js":"7","C:\\Users\\cavjo\\Documents\\eventmanager\\src\\services\\user.service.js":"8","C:\\Users\\cavjo\\Documents\\eventmanager\\src\\components\\login.js":"9","C:\\Users\\cavjo\\Documents\\eventmanager\\src\\components\\user.js":"10","C:\\Users\\cavjo\\Documents\\eventmanager\\src\\components\\admin.js":"11","C:\\Users\\cavjo\\Documents\\eventmanager\\src\\components\\superadmin.js":"12"},{"size":547,"mtime":1607479539738,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":499162500000,"results":"15","hashOfConfig":"14"},{"size":7851,"mtime":1607480102147,"results":"16","hashOfConfig":"14"},{"size":8049,"mtime":1607478207836,"results":"17","hashOfConfig":"14"},{"size":803,"mtime":1607457842719,"results":"18","hashOfConfig":"14"},{"size":174,"mtime":1607200389415,"results":"19","hashOfConfig":"14"},{"size":3746,"mtime":1607475237382,"results":"20","hashOfConfig":"14"},{"size":468,"mtime":1607470390077,"results":"21","hashOfConfig":"14"},{"size":2787,"mtime":1607475197982,"results":"22","hashOfConfig":"14"},{"size":6412,"mtime":1607479654174,"results":"23","hashOfConfig":"14"},{"size":5551,"mtime":1607476345885,"results":"24","hashOfConfig":"14"},{"size":7978,"mtime":1607476293692,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1f84hh5",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"28"},"C:\\Users\\cavjo\\Documents\\eventmanager\\src\\index.js",[],["54","55"],"C:\\Users\\cavjo\\Documents\\eventmanager\\src\\reportWebVitals.js",[],"C:\\Users\\cavjo\\Documents\\eventmanager\\src\\App.js",["56","57","58"],"C:\\Users\\cavjo\\Documents\\eventmanager\\src\\components\\add-event.component.js",[],"C:\\Users\\cavjo\\Documents\\eventmanager\\src\\services\\events.service.js",[],"C:\\Users\\cavjo\\Documents\\eventmanager\\src\\http-common.js",[],"C:\\Users\\cavjo\\Documents\\eventmanager\\src\\components\\register.js",[],"C:\\Users\\cavjo\\Documents\\eventmanager\\src\\services\\user.service.js",[],"C:\\Users\\cavjo\\Documents\\eventmanager\\src\\components\\login.js",[],"C:\\Users\\cavjo\\Documents\\eventmanager\\src\\components\\user.js",["59"],"import React, { Component } from \"react\";\r\nimport EventDataService from \"../services/events.service\";\r\n\r\nconst EventRow = props => (\r\n    <tr>\r\n\r\n        <td>{props.events.name}</td>\r\n        <td>{props.events.description}</td>\r\n        <td><a href=''>{props.events.url}</a></td>\r\n        <td>{props.events.start}</td>\r\n        <td>{props.events.end}</td>\r\n        <td>{props.events.address}</td>\r\n        <td>{props.events.city}</td>\r\n        <td>\r\n        <input value ={'Attend'} type='button' onClick={() =>{props.attend(props.events.id,localStorage.getItem('userid'))}}/>\r\n        </td>\r\n        <td>\r\n            <input value ={'Leave'} type='button' onClick={() =>{props.unattend(props.events.id,localStorage.getItem('userid'))}}/>\r\n        </td>\r\n    </tr>\r\n)\r\n\r\nexport default class Users extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.onChangeSearch = this.onChangeSearch.bind(this);\r\n        this.refresh = this.refresh.bind(this);\r\n        this.onChangeStart = this.onChangeStart.bind(this);\r\n        this.onChangeEnd = this.onChangeEnd.bind(this);\r\n        this.state = {\r\n            active: false,\r\n            start:'',\r\n            end:'',\r\n            searchText: \"\",\r\n            events: []\r\n        };\r\n\r\n\r\n\r\n    }\r\n\r\n    onChangeStart = (e) => {\r\n        this.setState({\r\n            start: e.target.value\r\n        });\r\n    }\r\n\r\n    onChangeEnd = (e) => {\r\n        this.setState({\r\n            end: e.target.value\r\n        });\r\n    }\r\n\r\n    onChangeActive = e =>{\r\n        this.setState({\r\n            active: !this.state.active\r\n        })\r\n    }\r\n    attend(eventId,userId)\r\n    {\r\n        const data = {\r\n            eventId: eventId,\r\n            userId: userId\r\n        }\r\n        EventDataService.attendEvent(data)\r\n            .then((res) =>{\r\n\r\n        }).catch((err) => console.log(err))\r\n    }\r\n\r\n    unattend(eventId,userId)\r\n    {\r\n\r\n        const data = {\r\n            eventId: eventId,\r\n            userId: userId\r\n        }\r\n        EventDataService.unattendEvent(data)\r\n            .then((res) =>{\r\n\r\n            }).catch((err) => console.log(err))\r\n    }\r\n\r\n    refresh(){\r\n\r\n        EventDataService.getAll()\r\n            .then(response => {\r\n                console.log(response.data);\r\n                this.setState({events : response.data})\r\n            }).catch(e => {\r\n                console.log(e);\r\n            });\r\n    }\r\n\r\n    onChangeSearch = e =>{\r\n        this.setState({\r\n            searchText: e.target.value\r\n        })\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.refresh();\r\n    }\r\n    search = (e) =>\r\n     {\r\n         const today = new Date((new Date()).toString().substring(0,15));\r\n         const start = (this.state.start !== '') ? new Date(this.state.start)  <= new Date(e.start): true;\r\n         const end = (this.state.end !== '') ? new Date(this.state.end)  >= new Date(e.end): true;\r\n         const t = this.state.searchText.toLowerCase()\r\n         const search = ((e.city.toString().toLowerCase().indexOf(t) > -1) ||\r\n             (e.name.toString().toLowerCase().indexOf(t) > -1) ||\r\n             (e.address.toString().toLowerCase().indexOf(t) > -1) ||\r\n             (e.description.toString().toLowerCase().indexOf(t) > -1))\r\n         const activeButton = ((this.state.active === true)? (new Date(e.start)  <= today && new Date(e.end) > today) : true)\r\n         const dateSearch = (start && end)\r\n         return (search && activeButton   && dateSearch)\r\n     }\r\n    render() {\r\n        return (\r\n            <main className=\"container my-5\">\r\n                <h1 className=\"text-primary text-center\">Events</h1>\r\n                <div className=\"custom-control custom-switch\">\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        className=\"custom-control-input\"\r\n                        id=\"customSwitch1\"\r\n                        value = {this.state.active}\r\n                        onChange={this.onChangeActive}\r\n                    />\r\n                    <label className=\"custom-control-label\" htmlFor=\"customSwitch1\">Active Events Only</label>\r\n                </div>\r\n                <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    id=\"searchText\"\r\n                    required\r\n                    value={this.state.searchText}\r\n                    onChange={this.onChangeSearch}\r\n                    name=\"searchText\"\r\n                /><br/>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"start\">Event Start Date</label>\r\n                    <input\r\n                        type=\"date\"\r\n                        className=\"form-control\"\r\n                        id=\"start\"\r\n                        value={this.state.start}\r\n                        onChange={this.onChangeStart}\r\n                        name=\"start\"\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"end\">Event End Date</label>\r\n                    <input\r\n                        type=\"date\"\r\n                        className=\"form-control\"\r\n                        id=\"end\"\r\n                        value={this.state.end}\r\n                        onChange={this.onChangeEnd}\r\n                        name=\"end\"\r\n                    />\r\n                </div>\r\n                <table className=\"table table-dark\">\r\n                    <thead>\r\n                    <tr>\r\n                        <th scope=\"col\"> Name</th>\r\n                        <th scope=\"col\"> Description</th>\r\n                        <th scope=\"col\"> URL</th>\r\n                        <th scope=\"col\"> Start Date</th>\r\n                        <th scope=\"col\"> End Date</th>\r\n                        <th scope=\"col\"> Address </th>\r\n                        <th scope=\"col\"> City </th>\r\n                        <th scope=\"col\"> Actions </th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.state.events.filter(this.search).map(events => {\r\n                            return (\r\n\r\n                               <EventRow key={events.id}  attend = {this.attend} unattend = {this.unattend} events = {events}/>\r\n                            );\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n            </main>\r\n        );\r\n    }\r\n}","C:\\Users\\cavjo\\Documents\\eventmanager\\src\\components\\admin.js",["60","61"],"import React, { Component } from \"react\";\r\nimport EventDataService from \"../services/events.service\";\r\n\r\nconst EventRow = props => (\r\n    <tr>\r\n        <td>{props.events.name}</td>\r\n        <td>{props.events.description}</td>\r\n        <td><a href=''>{props.events.url}</a></td>\r\n        <td>{props.events.start}</td>\r\n        <td>{props.events.end}</td>\r\n        <td>{props.events.address}</td>\r\n        <td>{props.events.city}</td>\r\n\r\n    </tr>\r\n)\r\n\r\nexport default class Admins extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.onChangeSearch = this.onChangeSearch.bind(this);\r\n        this.refresh = this.refresh.bind(this);\r\n        this.onChangeStart = this.onChangeStart.bind(this);\r\n        this.onChangeEnd = this.onChangeEnd.bind(this);\r\n        this.state = {\r\n            active: false,\r\n            start: \"\",\r\n            end: \"\",\r\n            searchText: \"\",\r\n            events: []\r\n        };\r\n\r\n\r\n\r\n    }\r\n\r\n    refresh(){\r\n\r\n        EventDataService.getAll()\r\n            .then(response => {\r\n                console.log(response.data);\r\n                this.setState({events : response.data})\r\n            }).catch(e => {\r\n            console.log(e);\r\n        });\r\n\r\n    }\r\n    onChangeActive = e =>{\r\n        this.setState({\r\n            active: !this.state.active\r\n        })\r\n\r\n    }\r\n\r\n    onChangeStart = (e) => {\r\n        this.setState({\r\n            start: e.target.value\r\n        });\r\n    }\r\n\r\n    onChangeEnd = (e) => {\r\n        this.setState({\r\n            end: e.target.value\r\n        });\r\n    }\r\n\r\n    onChangeSearch = e =>{\r\n        this.setState({\r\n            searchText: e.target.value\r\n        })\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.refresh();\r\n    }\r\n    search = (e) =>\r\n    {\r\n\r\n        const today = new Date((new Date()).toString().substring(0,15));\r\n        const start = (this.state.start !== '') ? new Date(this.state.start)  <= new Date(e.start): true;\r\n        const end = (this.state.end !== '') ? new Date(this.state.end)  >= new Date(e.end): true;\r\n        const t = this.state.searchText.toLowerCase()\r\n        const search = ((e.city.toString().toLowerCase().indexOf(t) > -1) ||\r\n                        (e.name.toString().toLowerCase().indexOf(t) > -1) ||\r\n                        (e.address.toString().toLowerCase().indexOf(t) > -1) ||\r\n                         (e.description.toString().toLowerCase().indexOf(t) > -1))\r\n        const activeButton = ((this.state.active === true)? (new Date(e.start)  <= today && new Date(e.end) > today) : true)\r\n        const user = (e.userid == localStorage.getItem('userid'))\r\n        const dateSearch = (start && end)\r\n        return (search && activeButton && user && dateSearch)\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <main className=\"container my-5\">\r\n\r\n                <h1 className=\"text-primary text-center\">Admin </h1>\r\n\r\n                <div className=\"custom-control custom-switch\">\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        className=\"custom-control-input\"\r\n                        id=\"customSwitch1\"\r\n                        value = {this.state.active}\r\n                        onChange={this.onChangeActive}\r\n                    />\r\n                        <label className=\"custom-control-label\" htmlFor=\"customSwitch1\">Active Events Only</label>\r\n                </div>\r\n                <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    id=\"searchText\"\r\n                    required\r\n                    value={this.state.searchText}\r\n                    onChange={this.onChangeSearch}\r\n                    name=\"searchText\"\r\n                /><br/>\r\n\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"start\">Event Start Date</label>\r\n                    <input\r\n                        type=\"date\"\r\n                        className=\"form-control\"\r\n                        id=\"start\"\r\n                        value={this.state.start}\r\n                        onChange={this.onChangeStart}\r\n                        name=\"start\"\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"end\">Event End Date</label>\r\n                    <input\r\n                        type=\"date\"\r\n                        className=\"form-control\"\r\n                        id=\"end\"\r\n                        value={this.state.end}\r\n                        onChange={this.onChangeEnd}\r\n                        name=\"end\"\r\n                    />\r\n                </div>\r\n                <table className=\"table table-dark\">\r\n                    <thead>\r\n                    <tr>\r\n                        <th scope=\"col\"> Name</th>\r\n                        <th scope=\"col\"> Description</th>\r\n                        <th scope=\"col\"> URL</th>\r\n                        <th scope=\"col\"> Start Date</th>\r\n                        <th scope=\"col\"> End Date</th>\r\n                        <th scope=\"col\"> Address </th>\r\n                        <th scope=\"col\"> City </th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {this.state.events.filter(this.search).map(events => {\r\n                        return (\r\n\r\n                            <EventRow key={events.id} events = {events}/>\r\n                        );\r\n                    })}\r\n                    </tbody>\r\n                </table>\r\n            </main>\r\n        );\r\n    }\r\n}","C:\\Users\\cavjo\\Documents\\eventmanager\\src\\components\\superadmin.js",["62"],"import React, { Component } from \"react\";\r\nimport EventDataService from '../services/events.service'\r\nimport UserDataService from '../services/user.service'\r\nconst EventRow = props => (\r\n    <tr>\r\n        <td>{props.events.user.username}</td>\r\n        <td>{props.events.name}</td>\r\n        <td>{props.events.description}</td>\r\n        <td><a href=''>{props.events.url}</a></td>\r\n        <td>{props.events.start}</td>\r\n        <td>{props.events.end}</td>\r\n        <td>{props.events.address}</td>\r\n        <td>{props.events.city}</td>\r\n\r\n    </tr>\r\n)\r\nconst UsersRow = props => (\r\n    <tr>\r\n        <td>{props.users.username}</td>\r\n        <td>{props.attended.map( (event) => {\r\n            return event.name;\r\n        }).join(', ')}</td>\r\n\r\n    </tr>\r\n)\r\n\r\nexport default class Superadmin extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.onChangeSearch = this.onChangeSearch.bind(this);\r\n        this.refresh = this.refresh.bind(this);\r\n\r\n        this.state = {\r\n\r\n            active:false,\r\n            start:\"\",\r\n            end:\"\",\r\n            searchText: \"\",\r\n            users: [],\r\n            events: [],\r\n            attended:[]\r\n        };\r\n\r\n\r\n\r\n    }\r\n\r\n     jsonToURI(json){ return encodeURIComponent(JSON.stringify(json)); }\r\n\r\n    listAttended(userid) {\r\n        const data ={\r\n            id: userid\r\n        }\r\n        EventDataService.listAttendedEvents(data)\r\n            .then((res) => {\r\n\r\n        }).catch((err) => console.log(err))\r\n\r\n    }\r\n\r\n    getAllAttended(){\r\n        return new Promise((resolve,reject) => {\r\n            UserDataService.findAll()\r\n                .then(response => Promise.all(response.data.map(user => {\r\n                    const data = {\r\n                        id: user.id\r\n                    }\r\n                    return EventDataService.listAttendedEvents(data)\r\n                    }))\r\n                    .then(array => {\r\n                        var li = [];\r\n                        for( var i in array){\r\n                            if(array[i].data.user.length  > 0)\r\n                            li.push(array[i].data.user[0])\r\n                        }\r\n                  //      console.log(array)\r\n                        resolve(li)\r\n                    })\r\n                )\r\n        })\r\n    }\r\n\r\n    refresh(){\r\n\r\n        EventDataService.findAll()\r\n            .then(response => {\r\n               console.log(response.data);\r\n                this.setState({events : response.data})\r\n            }).catch(e => {\r\n           console.log(e);\r\n        });\r\n\r\n         UserDataService.findAll()\r\n            .then(response => {\r\n                console.log(response.data);\r\n                this.setState({users : response.data})\r\n            }).catch(e => {\r\n            console.log(e);\r\n        });\r\n\r\n        this.getAllAttended().then(output => {\r\n            this.setState({attended: output})\r\n            console.log(output)\r\n        })\r\n\r\n\r\n    }\r\n    onChangeStart = (e) => {\r\n        this.setState({\r\n            start: e.target.value\r\n        });\r\n    }\r\n\r\n    onChangeEnd = (e) => {\r\n        this.setState({\r\n            end: e.target.value\r\n        });\r\n    }\r\n    onChangeActive = e =>{\r\n        this.setState({\r\n            active: !this.state.active\r\n        })\r\n    }\r\n    onChangeSearch = e =>{\r\n        this.setState({\r\n            searchText: e.target.value\r\n        })\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.refresh();\r\n    }\r\n    search = (e) =>\r\n    {\r\n        const today = new Date((new Date()).toString().substring(0,15));\r\n        const start = (this.state.start !== '') ? new Date(this.state.start)  <= new Date(e.start): true;\r\n        const end = (this.state.end !== '') ? new Date(this.state.end)  >= new Date(e.end): true;\r\n        const t = this.state.searchText.toLowerCase()\r\n        const search = ((e.user.username.toString().toLowerCase().indexOf(t) > -1) ||\r\n            (e.city.toString().toLowerCase().indexOf(t) > -1) ||\r\n            (e.name.toString().toLowerCase().indexOf(t) > -1) ||\r\n            (e.address.toString().toLowerCase().indexOf(t) > -1) ||\r\n            (e.description.toString().toLowerCase().indexOf(t) > -1))\r\n        const activeButton = ((this.state.active === true)? (new Date(e.start)  <= today && new Date(e.end) > today) : true)\r\n        const dateSearch = (start && end)\r\n        return (search && activeButton && dateSearch)\r\n\r\n    }\r\n    render() {\r\n    console.log(this.state.attended)\r\n        return (\r\n\r\n            <main className=\"container my-5\">\r\n\r\n                <h1 className=\"text-primary text-center\">Super Admin </h1>\r\n\r\n                <div className=\"custom-control custom-switch\">\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        className=\"custom-control-input\"\r\n                        id=\"customSwitch1\"\r\n                        value = {this.state.active}\r\n                        onChange={this.onChangeActive}\r\n                    />\r\n                    <label className=\"custom-control-label\" htmlFor=\"customSwitch1\">Active Events Only</label>\r\n                </div>\r\n                <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    id=\"searchText\"\r\n                    required\r\n                    value={this.state.searchText}\r\n                    onChange={this.onChangeSearch}\r\n                    name=\"searchText\"\r\n                /><br/>\r\n\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"start\">Event Start Date</label>\r\n                    <input\r\n                        type=\"date\"\r\n                        className=\"form-control\"\r\n                        id=\"start\"\r\n                        value={this.state.start}\r\n                        onChange={this.onChangeStart}\r\n                        name=\"start\"\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"end\">Event End Date</label>\r\n                    <input\r\n                        type=\"date\"\r\n                        className=\"form-control\"\r\n                        id=\"end\"\r\n                        value={this.state.end}\r\n                        onChange={this.onChangeEnd}\r\n                        name=\"end\"\r\n                    />\r\n                </div>\r\n                <table className=\"table table-dark\">\r\n                    <thead>\r\n                    <tr>\r\n                        <th scope=\"col\"> Owner </th>\r\n                        <th scope=\"col\"> Name</th>\r\n                        <th scope=\"col\"> Description</th>\r\n                        <th scope=\"col\"> URL</th>\r\n                        <th scope=\"col\"> Start Date</th>\r\n                        <th scope=\"col\"> End Date</th>\r\n                        <th scope=\"col\"> Address </th>\r\n                        <th scope=\"col\"> City </th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {this.state.events.filter(this.search).map(events => {\r\n                        return (\r\n\r\n                            <EventRow key={events.id} events = {events}/>\r\n                        );\r\n                    })}\r\n                    </tbody>\r\n                </table>\r\n                <table className=\"table table-dark\">\r\n                    <thead>\r\n                    <tr>\r\n                        <th scope=\"col\"> User </th>\r\n                        <th scope=\"col\"> Attended Events</th>\r\n\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n\r\n                    {\r\n\r\n                        this.state.attended.map((user) => {\r\n                        return (\r\n\r\n                            <UsersRow key={user.id} users = {user} attended = {user.attendedEvents}/>\r\n                        );\r\n                    })}\r\n                    </tbody>\r\n                </table>\r\n            </main>\r\n        );\r\n    }\r\n}",{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":18,"column":41,"nodeType":"69","messageId":"70","endLine":18,"endColumn":43},{"ruleId":"67","severity":1,"message":"68","line":66,"column":41,"nodeType":"69","messageId":"70","endLine":66,"endColumn":43},{"ruleId":"67","severity":1,"message":"68","line":119,"column":41,"nodeType":"69","messageId":"70","endLine":119,"endColumn":43},{"ruleId":"71","severity":1,"message":"72","line":9,"column":13,"nodeType":"73","endLine":9,"endColumn":24},{"ruleId":"71","severity":1,"message":"72","line":8,"column":13,"nodeType":"73","endLine":8,"endColumn":24},{"ruleId":"67","severity":1,"message":"68","line":88,"column":32,"nodeType":"69","messageId":"70","endLine":88,"endColumn":34},{"ruleId":"71","severity":1,"message":"72","line":9,"column":13,"nodeType":"73","endLine":9,"endColumn":24},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]